name: nitorch-manual-build

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Operating system'
        required: false
        default: 'ubuntu-latest'
      python-version:
        description: 'Version of python'
        required: false
        default: '3.6'
      pytorch-version:
        description: 'Version of pytorch'
        required: false
        default: '1.6'
      cuda-version:
        description: 'Version of cuda'
        required: false
        default: '10.1'

jobs:

  build:

    runs-on: ${{ github.event.inputs.os }}

    steps:
    - uses: actions/checkout@v2

    - if: runner.os == 'Windows'
      # Windows -> powershell
      name: Install CUDA ${{ github.event.inputs.cuda-version }} (Windows)
      env:
        cuda: ${{ github.event.inputs.cuda-version }}
      shell: powershell
      run: |
        # Install CUDA via a powershell script
        .\scripts\actions\install_cuda_windows.ps1
        if ($?) {
          # Set paths for subsequent steps, using $env:CUDA_PATH
          echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
          echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        }

    - if: runner.os != 'Windows'
      # Unix -> bash
      name: Install CUDA ${{ github.event.inputs.cuda-version }} (Unix)
      env:
        cuda: ${{ github.event.inputs.cuda-version }}
      shell: bash
      run: |
        if [ ! -z ${{ github.event.inputs.cuda-version }} ]; then
          os="$(cut -d'-' -f1 <<< ${{ github.event.inputs.os }})"
          echo "$os"
          if [ ! -f "./scripts/actions/install_cuda_${os}.sh" ]; then
            echo "cuda not available on ${os}"
            exit 1
          fi
          source "./scripts/actions/install_cuda_${os}.sh"
          if [[ $? -eq 0 ]]; then
            # Set paths for subsequent steps, using ${CUDA_PATH}
            echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
            echo "CUDA_PATH=${CUDA_PATH}" >> $GITHUB_ENV
            echo "${CUDA_PATH}/bin" >> $GITHUB_PATH
            echo "LD_LIBRARY_PATH=${CUDA_PATH}/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
          fi
        fi

    - name: Set up Python ${{ github.event.inputs.python-version }} on ${{ github.event.inputs.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ github.event.inputs.python-version }}

    - name: Install pip
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install PyTorch ${{ github.event.inputs.pytorch-version }}
      env:
        cuda: ${{ github.event.inputs.cuda-version }}
        torch: ${{ github.event.inputs.pytorch-version }}
      shell: bash
      run: |
        os="$(cut -d'-' -f1 <<< ${{ github.event.inputs.os }})"
        echo "$os"
        if [ ! -f "./scripts/actions/install_pytorch_${os}.sh" ]; then
          echo "pytorch not available on ${os}"
          exit 1
        fi
        source "./scripts/actions/install_pytorch_${os}.sh"

    - name: Build nitorch
        # Compiling for all architectures takes ages and this workflow is just
        # here to test that we didn't break anything in the compilation chain
        # so we only test one architecture (sm_35 -> the default)
        # In the package distribution workflow, we'll need to compile for
        # all architectures supported by (the pypi version of) pytorch.
        run: TORCH_CUDA_ARCH_LIST="3.5" python setup.py install
